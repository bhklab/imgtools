name: bob-the-builder

# only run on pushes to main or pull requests
on:
  push:
    # push to any branch *
    branches: *
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1

  tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Test with pytest
        run: |
          # Github action runners now have 4 cores
          poetry run pytest -s -v -n 4 --cov --cov-report xml:coverage-report/coverage.xml

      - name: Upload coverage report artifact to be used by Codecov
        # only upload if matrix.os is ubuntu-latest and matrix.python-version is 3.12
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

  codecov:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download coverage.xml artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

      - name: Use Codecov to track coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-report/coverage.xml
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella

  cd:
    permissions:
        contents: write
        packages: write
        issues: write
        pull-requests: write

    needs: [tests]

    # if pulling to main, deploy to PyPI
    if: github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Check-out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

  pip-squeak:
    needs: cd
    if: needs.cd.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.cd.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.cd.outputs.tag }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Package Builder
        run:
          python3 -m pip install build

      - name: Build package
        run:
          python3 -m build --sdist --wheel --outdir dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}


  does-the-pip-squeak:
    needs: pip-squeak
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using PyPi
        run: |
          pip install nbiatoolkit==${{ needs.cd.outputs.version }}
          NBIAToolkit
